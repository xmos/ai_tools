workspace(name = "xformer")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")

################################ Platforms ####################################
# Adding this to address JDK not found on M1 macs for bazel error
# https://github.com/GerritCodeReview/gerrit/commit/06b7b99768bfb6f611f70be741c8cb4f82afdf44
http_archive(
    name = "platforms",
    sha256 = "379113459b0feaf6bfbb584a91874c065078aa673222846ac765f86661c27407",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/platforms/releases/download/0.0.5/platforms-0.0.5.tar.gz",
        "https://github.com/bazelbuild/platforms/releases/download/0.0.5/platforms-0.0.5.tar.gz",
    ],
)

################################## Skylib #####################################
SKYLIB_VERSION = "1.3.0"

http_archive(
    name = "bazel_skylib",
    sha256 = "74d544d96f4a5bb630d465ca8bbcfe231e3594e5aae57e1edbf17a6eb3ca2506",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/{version}/bazel-skylib-{version}.tar.gz".format(version = SKYLIB_VERSION),
        "https://github.com/bazelbuild/bazel-skylib/releases/download/{version}/bazel-skylib-{version}.tar.gz".format(version = SKYLIB_VERSION),
    ],
)
load("@bazel_skylib//lib:paths.bzl", "paths")

############################### Compile Commands ###############################
# Hedron's Compile Commands Extractor for Bazel, used to get clangd to work
# Replace commit hash with latest version, later setup automatic update tool maybe?
BCCE_HASH = "e16062717d9b098c3c2ac95717d2b3e661c50608"
http_archive(
    name = "hedron_compile_commands",
    url = "https://github.com/hedronvision/bazel-compile-commands-extractor/archive/{hash}.tar.gz".format(hash = BCCE_HASH),
    strip_prefix = "bazel-compile-commands-extractor-{hash}".format(hash = BCCE_HASH),
)
load("@hedron_compile_commands//:workspace_setup.bzl", "hedron_compile_commands_setup")
hedron_compile_commands_setup()

################################## TensorFlow ##################################
http_archive(
    name = "org_tensorflow",
    patch_args = ["-p0"],
    patch_tool = "patch",
    patches = [
          "//patches:flatbuffer_export.patch",
          "//patches:softmax.patch",
    ],
    sha256 = "af0584df1a4e28763c32c218b39f8c4f3784fabb6a8859b00c02d743864dc191",
    strip_prefix = "tensorflow-2.12.0",
    urls = [
        "https://github.com/tensorflow/tensorflow/archive/refs/tags/v2.12.0.zip",
    ],
)

# Import all of the tensorflow dependencies. Note that we are deliberately
# letting TensorFlow take control of all the dependencies it sets up, whereas
# ours are initialized with `maybe`. Actually tracking this with Bazel is PITA
# and for now this gets TF stuff building. This includes, for instance,
# @llvm-project and @com_google_absl.
load("@org_tensorflow//tensorflow:workspace3.bzl", "tf_workspace3")
tf_workspace3()
load("@org_tensorflow//tensorflow:workspace2.bzl", "tf_workspace2")
tf_workspace2()
load("@org_tensorflow//tensorflow:workspace1.bzl", "tf_workspace1")
tf_workspace1()
load("@org_tensorflow//tensorflow:workspace0.bzl", "tf_workspace0")
tf_workspace0()

################################# lib_nn #######################################
new_local_repository(
    name = "lib_nn",
    path = "../third_party/lib_nn",
    build_file = "lib_nn.BUILD",
)

############################# lib_tflite_micro #################################
new_local_repository(
    name = "lib_tflite_micro",
    path = "../third_party/lib_tflite_micro",
    build_file = "lib_tflite_micro.BUILD",
)

########################### tflite_micro_compiler ##############################
new_local_repository(
    name = "lib_tflmc",
    path = "../third_party/lib_tflite_micro/tflite_micro_compiler",
    build_file = "lib_tflmc.BUILD",
)

############################## tflite_micro ####################################
local_repository(
    name = "tflite_micro",
    path = "../third_party/lib_tflite_micro/lib_tflite_micro/submodules/tflite-micro",
)

########################### larq compute engine ################################
http_archive(
    name = "lce",
    patch_args = ["-p0"],
    patch_tool = "patch",
    patches = [
          "//patches:tf_update.patch",
    ],
    sha256 = "63d77277103e29fd365bf07a32006a06d47d1960fcdf0bfee1417eac95d58279",
    strip_prefix = "compute-engine-9a7713816682fa311fe07ada5956a5498bbd2dda",
    # https://github.com/larq/compute-engine/tree/9a7713816682fa311fe07ada5956a5498bbd2dda
    # From 04 Nov 2022
    urls = [
        "https://github.com/larq/compute-engine/archive/9a7713816682fa311fe07ada5956a5498bbd2dda.zip",
    ],
)

