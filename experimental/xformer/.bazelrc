# Needed for tensorflow
build --experimental_repo_remote_exec

# Auto pick OS-specific config
build --enable_platform_specific_config

# C++14 standard version is required.
build:linux --cxxopt=-std=c++14
build:linux --host_cxxopt=-std=c++14
build:macos --cxxopt=-std=c++14
build:macos --host_cxxopt=-std=c++14
build:windows --cxxopt=/std:c++14
build:windows --host_cxxopt=/std:c++14

# Suppress C++ compiler warnings, otherwise build logs become 10s of MBs.
build:linux --copt=-w
build:linux --host_copt=-w
build:macos --copt=-w
build:windows --copt=/W0

# Tensorflow uses M_* math constants that only get defined by MSVC headers if
# _USE_MATH_DEFINES is defined.
build:windows --copt=/D_USE_MATH_DEFINES
build:windows --host_copt=/D_USE_MATH_DEFINES

# Make sure to include as little of windows.h as possible
build:windows --copt=-DWIN32_LEAN_AND_MEAN
build:windows --host_copt=-DWIN32_LEAN_AND_MEAN
build:windows --copt=-DNOGDI
build:windows --host_copt=-DNOGDI

# MSVC (Windows): Standards-conformant preprocessor mode
# See https://docs.microsoft.com/en-us/cpp/preprocessor/preprocessor-experimental-overview
build:windows --copt=/Zc:preprocessor
build:windows --host_copt=/Zc:preprocessor

# Misc build options we need for windows.
build:windows --linkopt=/DEBUG
build:windows --host_linkopt=/DEBUG
build:windows --linkopt=/OPT:REF
build:windows --host_linkopt=/OPT:REF
build:windows --linkopt=/OPT:ICF
build:windows --host_linkopt=/OPT:ICF

# Verbose failure logs when something goes wrong
build:windows --verbose_failures

# Work around potential issues with large command lines on windows.
# See: https://github.com/bazelbuild/bazel/issues/5163
build:windows --features=compiler_param_file

# On windows, we never cross compile
build:windows --distinct_host_configuration=false

# Link with these libs only on macos
build:macos --linkopt=-framework
build:macos --linkopt=Foundation
build:macos --linkopt=-framework
build:macos --linkopt=SystemConfiguration

# Address sanitizer
# CC=clang bazel build --config asan
build:asan --strip=never
build:asan --copt -Wno-macro-redefined
build:asan --copt -fsanitize=address
build:asan --copt -DADDRESS_SANITIZER
build:asan --copt -g
build:asan --copt -O1
build:asan --copt -fno-omit-frame-pointer
build:asan --copt -fno-sanitize-recover=all
build:asan --copt -gmlt
build:asan --linkopt -fsanitize=address

# BAZEL DEBUG BUILD NOTES
# Creating a debug build for Tensorflow is extremely taxing. Enabling debug for all of Tensorflow makes the build and link process take 3-4 hours. It finally doesn't work as the library is too large to be loaded. 
# As a solution to this problem, the bazel option --per_file_copt is awesome as it allows just the files within a particular package to be built with different flags. 
# This is used in the below command to create a Tensorflow build which includes only debug symbols for Tensorflow Lite. Tensorflow also requires bazel version 3.7.2, so this is used locally just for the Tensorflow build.
# In the following command, we build the target "build_pip_package". This builds all(most) of Tensorflow and creates a Python whl package which we can "pip install". This can then be used to debug the TFLite interpreter when we are invoking it via the Tensorflow Python API, such as in xformer1.
# bazel build -c opt --strip="never" --per_file_copt="//tensorflow/lite/.*\.cc@-g,-O0" //tensorflow/tools/pip_package:build_pip_package

# Use the following command to create a debug build for xformer2
# bazel build -c dbg --spawn_strategy=local --javacopt="-g" --copt="-g" --strip="never" //:xcore-opt

# Use our custom-configured c++ toolchain.
#build:linux_config --crosstool_top=//toolchain:gnu_suite

# Use --cpu as a differentiator.
#build:linux_config --cpu=k8

# Use the default Bazel C++ toolchain to build the tools used during the
# build.
#build:linux_config --host_crosstool_top=//toolchain:gnu_suite
