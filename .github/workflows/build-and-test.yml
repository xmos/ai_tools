name: xmos-ai-tools-build-and-test

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Provide a valid branch or commit hash"
        required: true
  pull_request:

# Save the tag version in an environment variable
# The pretend version is used for the wheel as the
# tag version might be a branch name or commit hash
env:
  TAG_VERSION: ${{ github.event.inputs.version }}
  PRETEND_VERSION: 0.1.1
  BAZEL_CACHE_URL: https://storage.googleapis.com/bazel_remote_cache_0/gh_actions

jobs:
  manylinux-release-wheel:
    name: Build and test release wheels for manylinux2014
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          ref: ${{ env.TAG_VERSION }}
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: false
          swap-storage: false
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - uses: google-github-actions/auth@v1
        continue-on-error: true
        with:
          create_credentials_file: true
          credentials_json: ${{ secrets.BAZEL_REMOTE_CACHE_JSON_KEY }}
      - name: Build xformer and manylinux2014 wheel in docker
        # The SETUPTOOLS_SCM_PRETEND_VERSION var is passed via docker to the
        # python setup.py script to add the version info for the wheel file.
        #
        # auditwheel requires patchelf and repairs the created wheel file to
        # be compatible for manylinux.
        run: |
          pushd $GITHUB_WORKSPACE/xformer
          if [[ -n $GOOGLE_APPLICATION_CREDENTIALS ]]; then
            echo "using Google Cloud Storage cache"
            echo -e 'build --remote_cache=${{ env.BAZEL_CACHE_URL }}/${{ runner.os }}-${{ runner.arch }}-python${{ matrix.python-version }}' >> .bazelrc.user
            echo -e 'build --remote_upload_local_results=true --experimental_remote_cache_compression' >> .bazelrc.user
            echo -e 'build --google_default_credentials' >> .bazelrc.user
          fi
          popd

          cd $GITHUB_WORKSPACE
          docker run -e SETUPTOOLS_SCM_PRETEND_VERSION=${{ env.PRETEND_VERSION }} \
            -e GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcloud-credentials.json \
            -v $GOOGLE_APPLICATION_CREDENTIALS:/tmp/gcloud-credentials.json:ro \
            -v ${PWD}:/ai_tools -w /ai_tools \
            tensorflow/build:2.15-python${{ matrix.python-version }} \
            .github/scripts/build_linux_wheel.sh

          sudo apt-get -y -qq install patchelf --no-install-recommends
          python -m pip install auditwheel==5.2.0
          cd python
          for f in dist/*.whl; do
            auditwheel repair --plat manylinux2014_x86_64 $f
          done
      - uses: actions/upload-artifact@v2
        with:
          name: debug-archive
          path: python/wheelhouse/*.whl
      - name: Test linux wheels
        run: |
          pip install -r ./requirements.txt
          cd python/wheelhouse
          pip install *
          cd ../..
          pytest integration_tests/runner.py --models_path integration_tests/models/non-bnns/test_strided_slice --log-cli-level=debug -vvvv -s

 