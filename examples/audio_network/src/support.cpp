#include <string.h>
#include <print.h>
#include <math.h>
#include <stdio.h>

#include "model_audioi16.tflite.h"

#define MEL_BINS 64
#define MEL_Q_VALUE       30
#define MEL_ONE_VALUE     (1 << MEL_Q_VALUE)

extern "C" {

#define LOOKUP_TYPICAL       0
#define LOOKUP_HARSH         1
#define LOOKUP_PASSTHROUGH   2
#define LOOKUP_MEDIUM        3
                                      // Buttons pressed, 0000 is all, 1111 is none
    int32_t button_lookup[8] = {
        LOOKUP_TYPICAL,               // 0000
        LOOKUP_TYPICAL,               // 0001
        LOOKUP_TYPICAL,               // 0010
        LOOKUP_HARSH,                 // 0011
        LOOKUP_TYPICAL,               // 0100
        LOOKUP_MEDIUM,                // 0101
        LOOKUP_PASSTHROUGH,           // 0110
        LOOKUP_TYPICAL,               // 0111
    };

    int32_t output_lookup[4][256] = {
        {
            0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
            17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33,
            34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 52,
            53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 71,
            73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 90, 91, 93,
            94, 95, 97, 98, 99,101,102,104,105,106,108,109,111,112,114,115,
            116,118,119,121,122,124,125,127,128,130,131,133,134,136,137,139,
            141,142,144,145,147,148,150,151,153,155,156,158,160,161,163,164,
            166,168,169,171,173,174,176,178,179,181,183,185,186,188,190,192,
            193,195,197,199,200,202,204,206,208,209,211,213,215,217,219,220,
            222,224,226,228,230,232,234,236,237,239,241,243,245,247,249,251,
            253,255,257,259,261,263,265,267,269,271,273,275,278,280,282,284,
            286,288,290,292,294,297,299,301,303,305,308,310,312,314,316,319,
            321,323,325,328,330,332,335,337,339,342,344,346,349,351,353,356,
            358,361,363,365,368,370,373,375,378,380,383,385,388,390,393,395,
            398,400,403,405,408,411,413,416,418,421,424,426,429,432,434,437,
        },

        {
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,
            1,  1,  1,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,
            5,  5,  5,  5,  6,  6,  7,  7,  7,  8,  8,  9,  9,  9, 10, 10,
            11, 11, 12, 12, 13, 14, 14, 15, 15, 16, 17, 17, 18, 19, 19, 20,
            21, 21, 22, 23, 24, 24, 25, 26, 27, 28, 29, 30, 31, 32, 32, 33,
            34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 52,
            53, 54, 56, 57, 58, 60, 61, 63, 64, 66, 67, 69, 71, 72, 74, 75,
            77, 79, 81, 82, 84, 86, 88, 90, 92, 93, 95, 97, 99,101,104,106,
            108,110,112,114,117,119,121,123,126,128,131,133,136,138,141,143,
            146,149,151,154,157,160,162,165,168,171,174,177,180,183,187,190,
            193,196,200,203,206,210,213,217,220,224,227,231,235,239,242,246,
            250,254,258,262,266,271,275,279,283,288,292,296,301,305,310,315,
            319,324,329,334,339,344,349,354,359,364,369,375,380,386,391,397,
            402,408,414,419,425,431,437,443,449,456,462,468,475,481,488,494,
            501,508,515,521,528,535,543,550,557,564,572,579,587,594,602,610,
            618,626,634,642,650,659,667,675,684,693,701,710,719,728,737,747,
        },
        {
            256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,
            256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,
            256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,
            256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,
            256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,
            256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,
            256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,
            256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,
            256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,
            256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,
            256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,
            256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,
            256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,
            256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,
            256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,
            256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,
        },
        {
            0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  3,  3,  3,  4,
            4,  5,  5,  5,  6,  6,  7,  7,  8,  8,  9,  9, 10, 11, 11, 12,
            12, 13, 14, 14, 15, 16, 16, 17, 18, 19, 19, 20, 21, 22, 22, 23,
            24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
            39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 56,
            57, 58, 59, 61, 62, 63, 65, 66, 67, 69, 70, 71, 73, 74, 76, 77,
            79, 80, 82, 83, 85, 86, 88, 89, 91, 92, 94, 96, 97, 99,101,102,
            104,106,108,109,111,113,115,117,118,120,122,124,126,128,130,132,
            134,136,138,140,142,144,146,148,150,152,155,157,159,161,163,166,
            168,170,173,175,177,180,182,184,187,189,192,194,197,199,202,205,
            207,210,212,215,218,220,223,226,229,231,234,237,240,243,246,249,
            252,255,258,261,264,267,270,273,276,279,283,286,289,292,296,299,
            302,306,309,312,316,319,323,326,330,333,337,341,344,348,352,356,
            359,363,367,371,375,379,383,386,390,395,399,403,407,411,415,419,
            424,428,432,436,441,445,450,454,459,463,468,472,477,482,486,491,
            496,501,505,510,515,520,525,530,535,540,545,550,556,561,566,571,
        }
    };
    float state[64] = {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                       0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                       0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                       0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                       0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                       0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                       0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                       0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
            
    int cnt = 0;
    int skip = 10000;
    int inputs_saved[16][64];
    int outputs_saved[16][64];

// TODO: replace all FLOAT with int16_t

void nn_predict_masks(int *masks, int button_state, float *mels) {
    model_init(NULL);
    float *inputs = (float *)model_input_ptr(0);
    float *state_inputs = (float *)model_input_ptr(1);
    float *state_outputs = (float *)model_output_ptr(0);
    float *outputs = (float *)model_output_ptr(1);
    memcpy(state_inputs, state, sizeof(state));
    for(int i = 0; i < MEL_BINS; i++) {
        inputs[i] = mels[i];
    }
#if 0
    if (skip == 0) {
        for(int i = 0; i < MEL_BINS; i++) {
            inputs_saved[cnt][i] = inputs[i];
        }
    }
#endif
    model_invoke();
    int table = button_lookup[button_state & 0x7];
    for(int i = 0; i < MEL_BINS; i++) {
        int converted_output = outputs[i] * 255.0;
        masks[i] = output_lookup[table][converted_output] << (MEL_Q_VALUE-8);
    }
#if 0
    if (skip == 0) {
        for(int i = 0; i < MEL_BINS; i++) {
            outputs_saved[cnt][i] = outputs[i];
        }
        cnt++;
        if (cnt == 16) {
            for(int i = 0; i < MEL_BINS; i++) {
                for(int c = 0; c < cnt; c++) {
                    printint(inputs_saved[c][i]);
                    printchar(' ');
                }
                printchar('\n');
            }
            printstr("outputs\n");
            for(int i = 0; i < MEL_BINS; i++) {
                for(int c = 0; c < cnt; c++) {
                    printint(outputs_saved[c][i]);
                    printchar(' ');
                }
                printchar('\n');
            }
            _exit(0);
        }
    } else {
        skip--;
    }
#endif
    memcpy(state, state_outputs, sizeof(state));
}

};
