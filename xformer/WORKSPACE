workspace(name = "xformer")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")

################################ Platforms ####################################
# Adding this to address JDK not found on M1 macs for bazel error
# https://github.com/GerritCodeReview/gerrit/commit/06b7b99768bfb6f611f70be741c8cb4f82afdf44
http_archive(
    name = "platforms",
    sha256 = "379113459b0feaf6bfbb584a91874c065078aa673222846ac765f86661c27407",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/platforms/releases/download/0.0.5/platforms-0.0.5.tar.gz",
        "https://github.com/bazelbuild/platforms/releases/download/0.0.5/platforms-0.0.5.tar.gz",
    ],
)

################################## Skylib #####################################
SKYLIB_VERSION = "1.3.0"

http_archive(
    name = "bazel_skylib",
    sha256 = "74d544d96f4a5bb630d465ca8bbcfe231e3594e5aae57e1edbf17a6eb3ca2506",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/{version}/bazel-skylib-{version}.tar.gz".format(version = SKYLIB_VERSION),
        "https://github.com/bazelbuild/bazel-skylib/releases/download/{version}/bazel-skylib-{version}.tar.gz".format(version = SKYLIB_VERSION),
    ],
)
load("@bazel_skylib//lib:paths.bzl", "paths")

############################### Compile Commands ###############################
# Hedron's Compile Commands Extractor for Bazel, used to get clangd to work
# Replace commit hash with latest version, later setup automatic update tool maybe?
BCCE_HASH = "e16062717d9b098c3c2ac95717d2b3e661c50608"
http_archive(
    name = "hedron_compile_commands",
    url = "https://github.com/hedronvision/bazel-compile-commands-extractor/archive/{hash}.tar.gz".format(hash = BCCE_HASH),
    strip_prefix = "bazel-compile-commands-extractor-{hash}".format(hash = BCCE_HASH),
)
load("@hedron_compile_commands//:workspace_setup.bzl", "hedron_compile_commands_setup")
hedron_compile_commands_setup()

################################## TensorFlow ##################################
http_archive(
    name = "org_tensorflow",
    patch_args = ["-p1"],
    patches = [
          "//patches:flatbuffer_export.patch",
          "//patches:softmax.patch",
    ],
    sha256 = "f771db8d96ca13c72f73c85c9cfb6f5358e2de3dd62a97a9ae4b672fe4c6d094",
    strip_prefix = "tensorflow-2.15.0",
    urls = [
        "https://github.com/tensorflow/tensorflow/archive/refs/tags/v2.15.0.zip",
    ],
)

http_archive(
    name = "rules_python",
    sha256 = "0a8003b044294d7840ac7d9d73eef05d6ceb682d7516781a4ec62eeb34702578",
    strip_prefix = "rules_python-0.24.0",
    url = "https://github.com/bazelbuild/rules_python/archive/refs/tags/0.24.0.tar.gz",
)

load("@rules_python//python:repositories.bzl", "python_register_toolchains")
load(
    "@org_tensorflow//tensorflow/tools/toolchains/python:python_repo.bzl",
    "python_repository",
)

python_repository(name = "python_version_repo")

load("@python_version_repo//:py_version.bzl", "HERMETIC_PYTHON_VERSION")

python_register_toolchains(
    name = "python",
    ignore_root_user_error = True,
    python_version = HERMETIC_PYTHON_VERSION,
)

# Import all of the tensorflow dependencies. Note that we are deliberately
# letting TensorFlow take control of all the dependencies it sets up, whereas
# ours are initialized with `maybe`. Actually tracking this with Bazel is PITA
# and for now this gets TF stuff building. This includes, for instance,
# @llvm-project and @com_google_absl.
load("@org_tensorflow//tensorflow:workspace3.bzl", "tf_workspace3")
tf_workspace3()
load("@org_tensorflow//tensorflow:workspace2.bzl", "tf_workspace2")
tf_workspace2()
load("@org_tensorflow//tensorflow:workspace1.bzl", "tf_workspace1")
tf_workspace1()
load("@org_tensorflow//tensorflow:workspace0.bzl", "tf_workspace0")
tf_workspace0()

################################# lib_nn #######################################
new_local_repository(
    name = "lib_nn",
    path = "../third_party/lib_nn",
    build_file = "lib_nn.BUILD",
)

############################# lib_tflite_micro #################################
new_local_repository(
    name = "lib_tflite_micro",
    path = "../third_party/lib_tflite_micro",
    build_file = "lib_tflite_micro.BUILD",
)

########################### tflite_micro_compiler ##############################
new_local_repository(
    name = "lib_tflmc",
    path = "../third_party/lib_tflite_micro/tflite_micro_compiler",
    build_file = "lib_tflmc.BUILD",
)

############################## tflite_micro ####################################
local_repository(
    name = "tflite_micro",
    path = "../third_party/lib_tflite_micro/lib_tflite_micro/submodules/tflite-micro",
)

# We require this due to includes in BUILD file in tflite_micro/python/tflite_micro
load("@rules_python//python:pip.bzl", "pip_parse")
pip_parse(
    name = "tflm_pip_deps",
    requirements_lock = "@tflite_micro//third_party:python_requirements.txt",
)

########################### larq compute engine ################################
http_archive(
    name = "lce",
    patch_args = ["-p1"],
    patches = [
          "//patches:tf_update.patch",
    ],
    sha256 = "809412dec49eb061bf7a64b721782b02cd47321a118b99c9cfa092756eef781b",
    strip_prefix = "compute-engine-0.13.0",
    urls = [
        "https://github.com/larq/compute-engine/archive/refs/tags/v0.13.0.zip",
    ],
)

