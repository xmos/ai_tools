diff --git a/tensorflow/compiler/mlir/lite/flatbuffer_export.cc b/tensorflow/compiler/mlir/lite/flatbuffer_export.cc
index 1a55e517791..cb2c21c8861 100644
--- a/tensorflow/compiler/mlir/lite/flatbuffer_export.cc
+++ b/tensorflow/compiler/mlir/lite/flatbuffer_export.cc
@@ -244,6 +244,14 @@ static bool IsConst(Operation* op) {
              mlir::stablehlo::ConstantOp>(op);
 }
 
+// We don't want to export XC scratch buffer ops
+static bool IsFakeXCOp(Operation* op) {
+  if(auto customOp = dyn_cast<mlir::TFL::CustomOp>(op)){
+    return customOp.getCustomCode().str() == "XC_fake_scratch";
+  }
+  return false;
+}
+
 static bool IsTFResourceOp(Operation* op) {
   for (const auto& operand : op->getOperands()) {
     auto elementType = getElementTypeOrSelf(operand.getType());
@@ -2462,6 +2470,9 @@ std::optional<BufferOffset<tflite::SubGraph>> Translator::BuildSubGraph(
     // Skip constant ops as they don't represent a TFLite operator.
     if (IsConst(&inst)) continue;
 
+    // We don't want to export XC scratch buffer ops.
+    if (IsFakeXCOp(&inst)) continue;
+
     // Fetch operand and result tensor indices.
     std::vector<int32_t> results;
     results.reserve(inst.getNumResults());
@@ -2577,10 +2588,12 @@ Translator::CreateMetadataVector() {
   }
   for (const auto& kv : metadata_) {
     const std::string& val = kv.second;
-    // Only take the first kByteStringSize values.
-    const int count = std::min(kByteStringSize, val.length());
-    std::string value = std::string(kByteStringSize, '\0')
-                            .assign(val.begin(), val.begin() + count);
+    if (val.length() % 16 != 0) {
+      module_.emitError("metadata string must be aligned to 16 bytes");
+      return std::nullopt;
+    }
+    std::string value = std::string(val.length(), '\0')
+                            .assign(val.begin(), val.begin() + val.length());
     metadata.push_back(BuildMetadata(kv.first, value));
   }
 
@@ -2986,8 +2999,6 @@ std::optional<std::string> Translator::TranslateInternal() {
       mac_str = absl::StrFormat("%.3f G ",
                                 static_cast<double>(ops_count / 2) / billion);
     }
-    LOG(INFO) << "Estimated count of arithmetic ops: " << flops_str
-              << " ops, equivalently " << mac_str << " MACs";
   }
 
   std::string model_description;
